// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model สำหรับระบบ authentication และ authorization
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  status        UserStatus @default(PENDING)
  company_id    Int?

  company       Company? @relation(fields: [company_id], references: [company_id])

  accounts Account[]
  sessions Session[]

  @@map("users")
}

// Account model สำหรับ OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model สำหรับ NextAuth.js
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// VerificationToken model สำหรับ email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

model Division {
  division_id          Int         @id @default(autoincrement())
  division_name        String
  departments          Department[]

  @@map("divisions")
}

model Department {
  department_id       Int         @id @default(autoincrement())
  department_name     String
  division_id         Int
  division            Division    @relation(fields: [division_id], references: [division_id])
  po Po[]

  @@map("departments")
}

model Company {
  company_id   Int     @id @default(autoincrement())
  company_name String
  users User[]
  po Po[]

  @@map("Companies")
}

model Employee {
  employee_id   Int       @id @default(autoincrement())
  personal_id   String    @unique
  prefix_th     String
  first_name_th String
  last_name_th  String
  prefix_en     String?
  first_name_en String?
  last_name_en  String?
  birth_date    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  employee_contract EmployeeContract[]

  @@map("employees")
}

model Position {
  position_id   Int     @id @default(autoincrement())
  position_name String
  po Po[]

  @@map("positions")
}

model Po {
  po_id           Int         @id @default(autoincrement())
  po_number       String      @unique
  company_id      Int
  department_id   Int
  position_id     Int
  start_date      DateTime
  end_date        DateTime
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  employee_count  Int
  po_type         String
  company         Company     @relation(fields: [company_id], references: [company_id])
  department      Department  @relation(fields: [department_id], references: [department_id])
  position        Position    @relation(fields: [position_id], references: [position_id])

  employee_contract EmployeeContract[]
  @@map("pos")
}

model EmployeeContract {
  employee_contract_id Int        @id @default(autoincrement())
  employee_id          Int
  po_id                Int
  status               ContractStatus
  start_date           DateTime
  end_date             DateTime?
  created_at           DateTime   @default(now())
  updated_at           DateTime   @updatedAt
  note                 String?
  employee_code        String     @unique

  employee             Employee  @relation(fields: [employee_id], references: [employee_id])
  po                   Po        @relation(fields: [po_id], references: [po_id])

  @@map("employee_contracts")
}

enum ContractStatus {
  ACTIVE
  INACTIVE
  TERMINATED
}

